#prompt_2 = "You are given a dialogue text delimited by triple quotes on the topic of medicine. This is a dialogue between two people - candidate(who play a doctor) and teacher(who play a patient). Based on the provided dialogue generate a (detailed and structured) summary report with sections for each roleplay and one section with overall performance summary. Point out mistakes of the candidate's(doctor's) speech, grammar, lexical choices, pronunciation, accuracy and overall communication skills. Also, summarise the teacher's feedback on the candidate's performance"

<input type="text" name={{name}}>
<input type="submit" value="submit">



@app.route('/<choice>')
def own_or_def(choice):

    choice = str(escape(request.args.get("choice")))

    if choice == "Own":

        return redirect(url_for)
    #render_template('link.html', header="Your prompt goes here: ", name="prompt")
    
    return render_template('link.html', header="Prompt selected.\nPlease provide the link to the video:", name="link")

@app.route('/<link>')
def link(link):
    link = str(escape(request.args.get("link")))
    prompt = str(escape(request.args.get("prompt")))
    transcription = main(link, prompt)
    return render_template("results.html" + transcription)




import requests

def download_file(url):

    dl_url = (url.replace('dl=0', 'dl=1')).replace("&amp;", "")

    response = requests.get(dl_url, stream=True)
    if response.status_code == 200:
        with open("file.mp4", 'wb', buffering=1) as file:
            for chunk in response.iter_content(10 * 1048):
                file.write(chunk)
        print("File downloaded successfully!")
    else:
        print("Error: Failed to download file")

    return file






import dropbox

def download_file_from_dropbox(api_token, dropbox_path, local_path):
    dbx = dropbox.Dropbox(api_token)

    try:
        with open(local_path, "wb") as f:
            metadata, res = dbx.files_download(path=dropbox_path)
            f.write(res.content)
        print(f"File downloaded successfully to {local_path}")
    except dropbox.exceptions.ApiError as err:
        print(f"Error: {err}")

# Example usage
access_token = 'YOUR_ACCESS_TOKEN'
dropbox_file_path = '/path/to/file/in/dropbox.txt'
local_destination = 'downloaded_file.txt'
download_file_from_dropbox(access_token, dropbox_file_path, local_destination)




words_info = result.alternatives[0].words

    #Printing out the output
    for word_info in words_info:
        print(f"speaker_tag: {word_info.speaker_tag}, word: '{word_info.word}'")





#response = operation.results[-1]
#
    #print(response)
#
    #words_info = response.alternatives[0].words
    
##Printing out the output
    #for word_info in words_info:
    #    result = f"Speaker {word_info.speaker_tag}: {word_info.word}"
    #    print(f"speaker_tag: {word_info.speaker_tag}, word: '{word_info.word}'")





#Deleting uploaded audio file after operation completion
generation_match_precondition = 1
blob.reload()
generation_match_precondition = blob.generation
blob.delete(if_generation_match=generation_match_precondition)


# `pip3 install assemblyai` (macOS)
# `pip install assemblyai` (Windows)

import assemblyai as aai

aai.settings.api_key = "bc90a68cad05489689f948691bc5d3de"
transcriber = aai.Transcriber()

transcript = transcriber.transcribe("https://assembly.ai/news.mp4")
# transcript = transcriber.transcribe("./my-local-audio-file.wav")

print(transcript.text)






Google speech-to-text

from google.cloud import speech_v1p1beta1 as speech
from google.cloud import storage
from google.cloud.speech_v1p1beta1 import RecognitionConfig

def process_transcription(audio_file):

    #Upload audio file to the google bucket
    storage_client = storage.Client()

    bucket = storage_client.bucket("ai_summary_report")

    blob = bucket.blob("audios/audio.mp3")

    blob.upload_from_filename(audio_file)

    print(f"File {audio_file} uploaded to ai_summary_report/audios/")
    

    #Making a transcription

    audio = speech.RecognitionAudio(uri="gs://ai_summary_report/audios/audio.mp3")

    client = speech.SpeechClient()
    
    diarization_config = speech.SpeakerDiarizationConfig(
        enable_speaker_diarization=True,
        min_speaker_count=2,
        max_speaker_count=2
    )

    #speech_context = speech.SpeechContext()

    config = RecognitionConfig(
        encoding=speech.RecognitionConfig.AudioEncoding.MP3,
        sample_rate_hertz=16000,
        language_code="en-US",
        alternative_language_codes=["en-GB", "en-AU", "en-IN"],
        max_alternatives=1,
        profanity_filter=False,
        enable_automatic_punctuation=True,
        enable_spoken_punctuation=True,
        diarization_config=diarization_config,
        model="latest_long",
        use_enhanced=True,
    )

    print("Waiting for the operation to complete...")
    operation = client.long_running_recognize(config=config, audio=audio)

    transcript_builder = []

    #for n, result in enumerate(operation.results):
    #    if n % 2 == 0:
    #        transcript_builder.append(f"\nSpeaker 2: {result.alternatives[0].transcript}\n")
    #    else:
    #        transcript_builder.append(f"\nSpeaker 1: {result.alternatives[0].transcript}\n")

    #this line is added
    response = operation.result()
    #Printing out the output
        
    output = ""

    for result in response.results:
        words_info = result.alternatives[0].words

        speaker_transcript = {}

        for word_info in words_info:
            speaker_tag = word_info.speaker_tag
            word = word_info.word

            if speaker_tag not in speaker_transcript:
                speaker_transcript[speaker_tag] = []

            speaker_transcript[speaker_tag].append(word)

        for speaker, transcript in speaker_transcript.items():
            output += (f"Speaker: {speaker}: {' '.join(transcript)}")

        #transcript_builder.append(f"\nSpeaker {word_info.speaker_tag}: {words_lst}\n")

    #result = "".join(transcript_builder)

    return output




    #Creating a txt file with transcription and future report
    username = (os.environ.get("userprofile"))[9:]

    for n in range(1, 100):
        destination_file_1 = f"C:/Users/{username}/Desktop/Transcription and Summary #{n}.docx"
        destination_file_2 = f"C:/Users/{username}/Desktop/Candidate's Summary Report #{n}.docx"
        
        if os.path.exists(destination_file_1):
            pass
        else:
            with open(destination_file_1, "x") as file:
                file.write(f"Transcription is as following:\n\n{transcription}\n\n")
            with open(destination_file_2, "x") as file:
                pass
            break

print(f"The process has been successfully completed! \n\nCheck the: \n{destination_file_1}\nand\n{destination_file_2}")






 #for n in range(1, 100):
    #    if os.path.exists(f"C:/Users/{username}/Downloads/Transcription #{n}.docx"):
    #        pass
    #    else:
    #        with open(f'C:/Users/{username}/Downloads/Transcription #{n}.docx', "w") as file:
    #            file.write(transcription)
    #            send_file(file)
    #        with open(f"C:/Users/{username}/Downloads/Summary report #{n}.docx", "w") as file:
    #            file.write(f"{summary_report.choices[0].message.content}")
    #            send_file(file)
    #        break


<meta http-equiv="refresh" content="0; url=https://benchmark-summary-report-eae227664887.herokuapp.com/main"/>






file.write(result[0])
        file = request.files[file] 
        print(file)
        filename = secure_filename(file.filename)
        print(filename)
        file.save(os.path.join(app.config["UPLOAD_FOLDER"], filename))

    uploads = os.path.join(app.root_path, app.config["UPLOAD_FOLDER"])

    send_from_directory(uploads, "summary_report.docx")



 if job.is_finished:
        result = job.return_value()

        session["result"] = result

        return redirect(url_for("results"))
    else:
        time.sleep(1)
        return render_template('processing.html')



<meta http-equiv="refresh" content="0; url=https://benchmark-summary-report-eae227664887.herokuapp.com/waiting"/>




<a href="file:"{sf}>Summary Report</a>
        <a href="file:"{tf}>Transcription</a>



<form action="/logs_download" method="GET"></form>
            <label for="Logs">Log {{id}}:</label>
            <input type="submit" value="Summary report" name="choice" id={{id}}>
            <input type="submit" value="Transcription" name="choice" id={{id}}>
            <br>
        </form>




PDF:

From main.py:
    elif name == "Summary report.pdf":
            return send_file(pdf(logs[0]), as_attachment=True, download_name=f"summary_report_{filename}.pdf", mimetype="application/pdf")
        elif name == "Transcription.pdf":
            return send_file(pdf(logs[1]), as_attachment=True, download_name=f"transcription_{filename}.pdf", mimetype="application/pdf")

    elif pick_one == "Summary report.pdf":
        return send_file(pdf(summary_report), as_attachment=True, download_name=f"summary_report_{filename}.pdf", mimetype="application/pdf")
    else:
        return send_file(pdf(transcription), as_attachment=True, download_name=f"transcription_{filename}.pdf", mimetype="application/pdf")


From history.html:
<li><a href="{{ url_for('logs_download', id=id, name='Summary report.pdf')}}">Summary report.pdf</a></li>
<li><a href="{{ url_for('logs_download', id=id, name='Transcription.pdf')}}">Transcription.pdf</a></li>

From results.html:
<br><br>
        <input type="submit" value="Summary report.pdf" name="pick_one">
        <input type="submit" value="Transcription.pdf" name="pick_one">



summary_report = (str(summary_report, "utf-8")) + "\n\n <em>AI-generated content may be inaccurate or misleading. Always check for accuracy</em>.\n"
html = '<p>' + summary_report.replace('\n', '<br>') + '</p>'




      columns = summary_report.keys()

    values = [summary_report[column] for column in columns] # good one

    cursor.execute(f"INSERT INTO Logs(summary.keys(), transcription, filename) VALUES(%s, %s, %s);", (AsIs(','.join(columns), tuple(values)), transcription, filename))




Sidebar

<div class="col-md-4">
            <div class="content-section">
              <h3>Sidebar</h3>
              <p class='text-muted'>Navigate through different menus
                <ul class="list-group">
                  <a class="list-group-item list-group-item-light" href="/history">Logs History</a>
                  <a class="list-group-item list-group-item-light" href="/grading">Essay Grading</a>
                </ul>
              </p>
            </div>
          </div>


PDF converter

def pdf(text):

    decoded_text = text.getvalue().decode("utf-8", errors="replace")

    pdf_file = io.BytesIO()
    c = canvas.Canvas(pdf_file, pagesize=letter)
    c.setFont("Helvetica", 12)
    width, height = letter

    left_margin = 40
    right_margin = width - 40
    top_margin = height - 40
    bottom_margin = 40
    y_position = top_margin

    for line in decoded_text.split('\n'):

        if y_position <= bottom_margin: # add new page
            c.showPage()
            c.setFont("Helvetica", 12)
            y_position = top_margin
        c.drawString(left_margin, y_position, line)

        y_position -= 15

    c.save()

    pdf_file.seek(0)

    return pdf_file




Original header:
<header class="site-header">
    <nav class="navbar navbar-expand-md navbar-dark bg-steel fixed-top">
      <div class="container">
          <a class="navbar-brand mr-3" href="/">Benchmark Tools</a>
          <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarToggle" aria-controls="navbarToggle" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
          </button>
          <div class="collapse navbar-collapse" id="navbarToggle">
              <div class="navbar-nav mr-auto">
                 <a class="nav-item nav-link" href="/history">Report Logs</a>
                 <a class="nav-item nav-link" href="/about">About</a>
              </div>
              <!-- Navbar Right Side -->
              <div class="navbar-nav">
                 <a class="nav-item nav-link" href="/login">Login</a>
                 <a class="nav-item nav-link" href="/register">Register</a>
              </div>
          </div>
      </div>
    </nav>
  </header>





the header I wanted to have, but simply don't know how to define all this css for the html:

<div class="navbar">
    <div data-animation="default" data-collapse="medium" data-duration="400" data-easing="ease" data-easing2="ease" role="banner" class="webflow-native-navbar w-nav">
      ::before
      <div class="navbar-outer">
        <div class="navbar-inner">
          <a href="/" aria-current="page" class="navbar-logo-div w-nav-brand w--current" aria-label="home">
            <img loading="eager" alt="Logo" class="logo" src="/static/FinalBlue.png"/>
          </a>
          <nav role="navigation" class="nav-menu-wrapper w-nav-menu">
            <ul role="list" class="nav-menu-right w-list-unstyled">
              <li class="nav-item is-dropdown-d">
                <a fs-mirrorclick-element="target-2" href="#" class="nav-link w-inline-block">
                  <div class="copytext is-15px">Use Cases</div>
                  <img loading="lazy" alt class="nav-link-icon" src="/static/dropdown_chevron.png" style="transform: translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotateX(0deg) rotateY(0deg) rotateZ(-180deg) skew(0deg, 0deg); transform-style: preserve-3d;">
                </a>
                <div class="dropdown" style="display: flex;">
                  <a href="/" class="nav-link in-drop-down">Founders</a>
                  <a href="/" class="nav-link in-drop-down">Management</a>
                  <a href="/" class="nav-link in-drop-down">Investors</a>
                  <a href="/" class="nav-link in-drop-down">Sales</a>
                </div>
              </li>
              <li class="nav-item">
                <a href="/history" class="nav-link">Logs</a>
              </li>
              <li class="nav-item">
                <a href="/about" class="nav-link">About</a>
              </li>
              <li class="nav-item is-btn is-demo">
                <a href="/login" target="_blank" class="primary-btn w-inline-block">
                  <div class="btn-txt-container">
                    <div class="btn-txt" style="transform: translate3d(0px, 0%, 0px) scale3d(1, 1, 1) rotateX(0deg) rotateY(0deg) rotateZ(0deg) skew(0deg, 0deg); transform-style: preserve-3d;">Log In</div>
                    <div class="btn-txt" style="transform: translate3d(0px, 0%, 0px) scale3d(1, 1, 1) rotateX(0deg) rotateY(0deg) rotateZ(0deg) skew(0deg, 0deg); transform-style: preserve-3d;">Log In</div>
                  </div>
                </a>
              </li>
              <li class="nav-item is-btn">
                <a href="/register" class="primary-btn with-img-bg w-inline-block">
                  <div class="btn-txt-container">
                    <div class="btn-txt is-white" style="transform: translate3d(0px, 0%, 0px) scale3d(1, 1, 1) rotateX(0deg) rotateY(0deg) rotateZ(0deg) skew(0deg, 0deg); transform-style: preserve-3d;">Sign up</div>
                    <div class="btn-txt is-white" style="transform: translate3d(0px, 0%, 0px) scale3d(1, 1, 1) rotateX(0deg) rotateY(0deg) rotateZ(0deg) skew(0deg, 0deg); transform-style: preserve-3d;">Sign up<br></div>
                  </div>
                </a>
              </li>
            </ul>
          </nav>
        </div>
      </div>
      <div class="w-nav-overlay" data-wf-ignore id="w-nav-overlay-0"></div>
      ::after
    </div>
    <div fs-mirrorclick-element="trigger-2" data-w-id="70545d62-ae56-2d43-1615-7ef5bd248749" class="dropdown-closing-trigger" style="display: none;"></div>
  </div>




Just in case
.center {
  margin-left: 100;
  width: 60%;
  border: 3px solid #73AD21;
  padding: 10px;
}



<input type="submit" name="save" value="Save results" class="button2" style="text-align: left;">



 For example, 'repetitive_words' list should contain all the repetitive words that you spot in the 'original_text', same thing with the 'linking_words' and 'grammar_mistakes' lists.

 #ffdd57


 One of your main tasks is to enclose/wrap all the words from example dictionary's lists with the specific mark described in the steps below, either '!', '#', '^' or '-' - in the 'original_text'. I'll repeat again - specific words in 'original_text' should be enclosed/wrapped.




GPT reference
 {'original_topic': 'There is a lot of pressure on young people today to succeed academically. As a result, some people believe that non-academic subjects, such as physical education and cookery, should be removed from the school syllabus so that children can concentrate on academic work.', 'original_text': 'In the modern epoch, young people are under too much stress to become successful academically. Some individuals believe that non- academic courses such as physical education and cookery should be removed from school curriculum, hence students can focus on academic work. However some people refute with this. This essay will argue some possible reasons behind this in the impending paragraphs.\n\nFirst and foremost, subjects such as physical fitness and cooking are equally important as science and physics 1beacuse1 this 2extra curriculars2 can help reduce stress. In addition, 3this3 subjects include physical training and a variety of different sports. If someone 4passionate4 about it, one can excel in that particular domain. For example, Ronaldo is a famous football player due to 5its5 extremely good physical fitness and training. As 6consequence6, 7this extra courses7 should not 8remove8 from 9education system9.\n\nProbing ahead, parents force students to take academic subjects such as science, mathematics, and chemistry. This can help them to 10purse10 a career in the field of engineering and medical. Furthermore, there is a lot of 11competion11 in this field today, so it is difficult to excel in that. Hence, one 12have12 to study hard and this is putting a lot of pressure on children, which 13result13 in mental health issues.\n\nIn conclusion, it is understood that academic courses are crucial to become successful in some domains but one 14can not unseen14 non-academic subjects. I agree with the 15later15 statement after careful 16consideraton16 of both the arguments. It is predicted that in the future, more and more students will opt for them.', 'paragraphs_count': '4', 'grammar_mistakes': ['1beacuse1', '2extra curriculars2', '3this3', '4passionate4', '5its5', '6consequence6', '7this extra courses7', '8remove8', '9education system9', '10purse10', '11competion11', '12have12', '13result13', '14can not unseen14', '15later15', '16consideraton16'], 'corrected_words': ['because (spelling mistake)', 'extra-curriculars (hyphenation rule)', 'these (subject-verb agreement)', 'are passionate (subject-verb agreement)', 'his (possessive pronoun for a person)', 'as a consequence (article rule)', 'these extra courses (subject-verb agreement)', 'be removed (passive voice structure)', 'the education system (article rule)', 'pursue (spelling mistake)', 'competition (spelling mistake)', 'has (subject-verb agreement)', 'results (subject-verb agreement)', 'cannot overlook (incorrect word choice)', 'latter (confusion between similar words)', 'consideration (spelling mistake)'], 'linking_words': ['#however#', '#first and foremost#', '#in addition#', '#as consequence#', '#for example#', '#furthermore#', '#hence#', '#in conclusion#'], 'repetitive_words': [], 'unnecessary_words': ['-this essay will argue some possible reasons behind this in the impending paragraphs-'], 'submitted_by': 'Denis Yehorov', 'overall_band_score': '6.0'}




  <main role="main" class="container-fluid">
    <div class="row">
      <div class="col-lg-9">
        <div class="center">
          {% block content %}{% endblock %}
        </div>
      </div>
      <div class="col-lg-3">
        <br><br><br><br><br><br>
        {% block content2 %}{% endblock %}
      </div>
    </div>
  </main>